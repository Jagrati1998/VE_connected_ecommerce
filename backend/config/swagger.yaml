openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users
servers:
  - url: "http://localhost:4000"
    description: Local server

components:
  securitySchemes:
    BearerAuth:         # Define a security scheme for Bearer token
      type: http
      scheme: bearer
      bearerFormat: JWT # Specify the format of the token (optional)

security:              # Apply security globally
  - BearerAuth: []

paths:
  /users:
    

    post:
      summary: Register a new user  // Get Access Token from registration of a new User
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
    get:
      summary: Get all users
      security:           # You can also apply security on specific operations
        - BearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    password:
                     type: string
        '404':
          description: No users found

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the user to get
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: User retrieved successfully
        '404':
          description: User not found

    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the user to update
      requestBody:
        description: User update details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request

    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the user to delete
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found


# Product Endpoints
  /products:
    get:
      summary: Get all products
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    description:
                      type: string
                    price:
                      type: number
                    stock:
                      type: number
        '404':
          description: No products found

    post:
      summary: Create a new product
      requestBody:
        description: Product details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: number
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Bad request

  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the product to get
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: Product retrieved successfully
        '404':
          description: Product not found

    put:
      summary: Update a product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the product to update
      requestBody:
        description: Product update details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: number
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Bad request

    delete:
      summary: Delete a product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the product to delete
      security:
        - BearerAuth: []  # Apply security to this endpoint
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found

# Order Endpoints
  /orders:
    get:
      summary: Get all orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    userId:
                      type: string
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: string
                          quantity:
                            type: number
                    totalPrice:
                      type: number
        '404':
          description: No orders found

    post:
      summary: Create a new order
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: number
                totalPrice:
                  type: number
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Bad request

  /orders/{id}:
    get:
      summary: Get an order by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the order to get
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Order retrieved successfully
        '404':
          description: Order not found
  /orders/users/{id}:
    get:
      summary: Get all orders for a user
      description: Retrieve a list of all orders associated with the specified user ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve orders for
          schema:
            type: string
      security:
        - BearerAuth: [] # Adjust according to your authentication method
      responses:
        '200':
          description: List of orders for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Order ID
                    userId:
                      type: string
                      description: ID of the user who placed the order
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: string
                            description: ID of the product
                          quantity:
                            type: integer
                            description: Quantity of the product ordered
                    totalPrice:
                      type: number
                      format: float
                      description: Total price of the order
        '404':
          description: No orders found for this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Error retrieving orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string